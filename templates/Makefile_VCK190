TARGET = hw
EN_PL = 1
PLATFORM_REPO_PATHS = /tools/Xilinx/Vitis/2023.2/base_platforms/
PLATFORM = ${PLATFORM_REPO_PATHS}/xilinx_vck190_base_202320_1/xilinx_vck190_base_202320_1.xpfm
XCLBIN   = vck190_aie_base_graph_${TARGET}.xclbin
XSA	 = vck190_aie_base_graph_${TARGET}.xsa
XPFM	 = vck190_xpfm
HOST_SRCS := ./host/host.cpp
SYSROOT_PATH = /opt/petalinux/2023.2
SYSROOT = ${SYSROOT_PATH}/sysroots/cortexa72-cortexa53-xilinx-linux
SDKTARGETSYSROOT = ${SYSROOT}
EDGE_COMMON_SW_PATH = ./
EDGE_COMMON_SW= ${EDGE_COMMON_SW_PATH}/xilinx-versal-common-v2023.2
ROOTFS=${EDGE_COMMON_SW}/rootfs.ext4
IMAGE=${EDGE_COMMON_SW}/Image
TEMP_DIR := ./_x.$(TARGET).xilinx_vck190_base_202320_1
BUILD_DIR := ./build_dir.$(TARGET).xilinx_vck190_base_202320_1
GRAPH   := aie/adf_graph.cpp
LIBADF  = libadf.a
KERNEL_XO := $(TEMP_DIR)/top.xo
PACKAGE_OUT = ./package.$(TARGET)
RM = rm -f
RMDIR = rm -rf
ifeq ($(TARGET),sw_emu)
HOST_EXE = host_ps_on_x86
else
HOST_EXE = hostexe
endif
Freq={{freq}}000000
##########################################################################################################################################################
### DO NOT MODIFY BELOW THIS LINE UNLESS NECESSARY
################################################################################################################################################
VCC := v++
AIECC := v++ -c --mode aie
AIESIM := aiesimulator
X86SIM := x86simulator

ifeq ($(TARGET),sw_emu)
AIE_CMPL_CMD += $(AIECC) --platform=${PLATFORM}  --target x86sim --include "./aie" --include "./" --work_dir ./Work ${GRAPH}
else
AIE_CMPL_CMD += aiecompiler --platform=${PLATFORM} --target hw --stacksize=1024 --pl-register-threshold=250 --pl-freq=230  -include="./aie" --include="./" --disable-transform-broadcast-split=false -workdir=./Work ${GRAPH}
endif

ifeq ($(TARGET),sw_emu)
AIE_SIM_CMD = $(X86SIM) --pkg-dir=./Work
else
AIE_SIM_CMD = $(AIESIM) --pkg-dir=./Work --dump-vcd foo --profile --output-time-stamp=no --end-wait-time=30
endif

VPP_SPEC = system.cfg
VPP_XO_FLAGS := -c --platform $(PLATFORM) -t $(TARGET) --save-temps --optimize 2 -g --hls.jobs 8

VPP_LINK_FLAGS := -t $(TARGET) --platform $(PLATFORM) --save-temps --optimize 2
ifneq ($(TARGET), hw)
VPP_LINK_FLAGS += -g
endif
ifeq ($(EN_PL),1)
VPP_LINK_FLAGS += --config $(VPP_SPEC)
endif
VPP_LINK_FLAGS += --clock.default_freqhz ${Freq}
ifneq ($(TARGET),sw_emu)
VPP_LINK_FLAGS += --vivado.synth.jobs 8 --vivado.impl.jobs 8
endif

GCC_FLAGS := -Wall -c \
			 			 -std=c++17

ifeq ($(TARGET),sw_emu)
GCC_FLAGS += -I${XILINX_XRT}/include
else
GCC_FLAGS += --sysroot=$(SYSROOT)
endif

GCC_INCLUDES := -I./  \
								-I${XILINX_VITIS}/aietools/include \
								-I${XILINX_VITIS}/include \
								-I./aie

ifeq ($(TARGET),sw_emu)
GCC_INCLUDES += -I${XILINX_XRT}/include 
else
GCC_INCLUDES += -I$(SYSROOT)/usr/include/xrt
endif

GCC_LIB := -lxrt_coreutil
ifeq ($(TARGET),sw_emu)
GCC_LIB += -L${XILINX_XRT}/lib
else
GCC_LIB += -ladf_api_xrt -lgcc -lc -lxilinxopencl -lpthread -lrt -ldl -lcrypt -lstdc++ -L$(SYSROOT)/usr/lib --sysroot=$(SYSROOT) -L${XILINX_VITIS}/aietools/lib/aarch64.o
endif

ifeq ($(TARGET),sw_emu)
CXX := g++
else
CXX := $(XILINX_VITIS)/gnu/aarch64/lin/aarch64-linux/bin/aarch64-linux-gnu-g++
endif

.PHONY: clean

###
# Guarding Checks. Do not modify.
###
check_defined = \
	$(strip $(foreach 1,$1, \
		$(call __check_defined,$1,$(strip $(value 2)))))

__check_defined = \
	$(if $(value $1),, \
		$(error Undefined $1$(if $2, ($2))))

guard-PLATFORM_REPO_PATHS:
	$(call check_defined, PLATFORM_REPO_PATHS, Set your where you downloaded xilinx_vck190_base_202320_1)

guard-ROOTFS:
	$(call check_defined, ROOTFS, Set to: xilinx-versal-common-v2023.2/rootfs.ext4)

guard-IMAGE:
	$(call check_defined, IMAGE, Set to: xilinx-versal-common-v2023.2/Image)

guard-CXX:
	$(call check_defined, CXX, Run: xilinx-versal-common-v2023.2/environment-setup-cortexa72-cortexa53-xilinx-linux)

guard-SDKTARGETSYSROOT:
	$(call check_defined, SDKTARGETSYSROOT, Run: xilinx-versal-common-v2023.2/environment-setup-cortexa72-cortexa53-xilinx-linux)

###

all: aie build host package
run: all run_hw_emu
sd_card: all

aie: guard-PLATFORM_REPO_PATHS ${LIBADF}
${LIBADF}: ${GRAPH}
	${AIE_CMPL_CMD}
	@echo "COMPLETE: aie success."

aiesim: ${LIBADF}
	${AIE_SIM_CMD}
	@echo "COMPLETE: aiesim success."

build: $(XSA)
ifeq ($(EN_PL),1)
kernels:$(KERNEL_XO)
$(KERNEL_XO): kernel/hls.cpp
	mkdir -p $(TEMP_DIR)
	$(VCC) $(VPP_XO_FLAGS) -k top --hls.clock 300000000:top $< -o $@ | tee $(TEMP_DIR)/top.log
	@echo "### ***** top compilation done! *****"
$(XSA): ${KERNEL_XO} ${LIBADF}
	mkdir -p $(BUILD_DIR)
	$(VCC) -l $(VPP_LINK_FLAGS) --temp_dir $(BUILD_DIR) -o'$@' $(+) | tee $(BUILD_DIR)/hpc_xclbin.log
else
${XSA}: ${LIBADF}
	${VCC} -l $(VPP_LINK_FLAGS) $< -o $@
endif

host: guard-CXX guard-SDKTARGETSYSROOT
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) -o host.o ${HOST_SRCS} 
	$(CXX) *.o $(GCC_LIB) -std=c++17 -o ${HOST_EXE}
	@echo "COMPLETE: Host application created."

SIM_FILES := $(wildcard *.sim)
SIM_FLAGS := $(foreach file, $(SIM_FILES), --package.sd_file $(file))

ifeq ($(TARGET),sw_emu)
package: guard-PLATFORM_REPO_PATHS guard-IMAGE guard-ROOTFS package_${TARGET} 
package_${TARGET}: ${XSA} ${LIBADF} host
	emconfigutil --platform $(PLATFORM) --nd 1;\
	v++ -p -t ${TARGET} \
		--package.defer_aie_run \
		--platform ${PLATFORM} \
		--package.out_dir $(PACKAGE_OUT) \
		${XSA} ${LIBADF} -o ${XCLBIN}
	@echo "COMPLETE: sw_emu package created."
else
package: guard-ROOTFS guard-IMAGE guard-PLATFORM_REPO_PATHS package_${TARGET} 
package_${TARGET}: ${LIBADF} ${XSA} host
	${VCC} -p -t ${TARGET} -f ${PLATFORM} \
		--package.out_dir $(PACKAGE_OUT) \
		--package.rootfs ${ROOTFS} \
		--package.kernel_image ${IMAGE} \
		--package.boot_mode=sd \
		--package.image_format=ext4 \
		--package.defer_aie_run \
		${SIM_FLAGS} \
		--package.sd_file ${HOST_EXE} ${LIBADF} ${XSA} -o ${XCLBIN}
	@echo "COMPLETE: Package created."
endif

run_emu: 
# If the target is for SW_EMU, launch the emulator
ifeq (${TARGET},sw_emu)
	export XCL_EMULATION_MODE=$(TARGET) 
	./host_ps_on_x86 ../${XCLBIN} 0 1
else
# If the target is for HW_EMU, launch the emulator
ifeq (${TARGET},hw_emu)
	cd ./package.hw_emu
	./launch_hw_emu.sh
else
	@echo "Hardware build, no emulation executed."
endif
endif

clean:
	-$(RMDIR) $(HOST_EXE) $(XCLBIN)/{*sw_emu*,*hw_emu*} 
	-$(RMDIR) profile_* TempConfig system_estimate.xtxt *.rpt *.csv *.o *.xo *.xpe *.xsa cfg qemu_dts_files emu_qemu_scripts *.db sim  #*.a  Work aie/*.ll _x*
	-$(RMDIR)  *v++* .Xil emconfig.json dltmp* xmltmp* *.log *.jou *.wcfg *.wdb *bin* *summary* *.BIN *.bif *.exe  *.log *.txt _x
cleanaie: cleansim
	-$(RMDIR) *.a  Work
cleansim:
	-$(RMDIR) aiesimulator_output foo.vcd ISS_RPC_SERVER_PORT
cleantemp:
	-$(RMDIR) ${TEMP_DIR}
cleanhost:
	-$(RMDIR) ${HOST_EXE} ${AIE_O} $(GRAPH_O) main.o host.o
cleanpac:
	-$(RMDIR) mm_${TARGET}.xclbin.package_summary package.${TARGET}
cleanall: clean cleantemp cleansim cleanaie cleanhost cleanpac
	-$(RMDIR) build_dir* sd_card*
	-$(RMDIR) package.hw run_app.sh 
	-$(RMDIR) *xclbin.run_summary qemu-memory-_* emulation _vimage pl* start_simulation.sh *.xclbin
	$(MAKE) -C sw clean